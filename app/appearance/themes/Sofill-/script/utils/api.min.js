import * as config from "./../config.js";
export {
  以sql向思源请求块数据 as sql,
  获取思源块链接锚文本 as getAnchor,
  通过markdown创建文档 as createDocWithMd,
  删除思源文档 as removeDoc,
  重命名思源文档 as renameDoc,
  移动思源文档 as moveDoc,
  以id获取文档内容 as getDoc,
  以id获取文档块markdown as exportMdContent,
  以id获取文档大纲 as getDocOutline,
  以id获取思源块属性 as getBlockAttrs,
  设置思源块属性 as setBlockAttrs,
  列出指定路径下文档 as listDocsByPath,
  以id获取反向链接 as getBacklink,
  以sql获取嵌入块内容 as searchEmbedBlock,
  获取标签列表 as getTag,
  导出模板 as docSaveAsTemplate,
  渲染模板 as render,
  以id获取局部图谱 as getLocalGraph,
  获取全局图谱 as getGraph,
  以关键词搜索文档 as searchDocs,
  以关键词搜索块 as searchBlock,
  以关键词搜索模板 as searchTemplate,
  插入块 as insertBlock,
  插入前置子块 as prependBlock,
  插入后置子块 as appendBlock,
  删除块 as deleteBlock,
  更新块 as updateBlock,
  以id获取思源块信息 as getBlockByID,
  获取块kramdown源码 as getBlockKramdown,
  获取块面包屑 as getBlockBreadcrumb,
};

// 向思源请求数据
export async function request(url, data) {
  let resData = null;
  await fetch(url, {
    body: JSON.stringify(data),
    method: "POST",
    headers: {
      Authorization: `Token '${window.siyuan.config.api.token}'`,
    },
  }).then(function (response) {
    resData = response.json();
  });
  console.log(resData);
  return resData;
}

// 解析响应体
async function parseRes(response) {
  let r = await response;
  // console.log(r)
  return r.code === 0 ? r.data : null;
}

// 交互业务
export async function transactions(protyle, transactions = []) {
  const url = "/api/transactions";
  const ws_url = new URL(protyle.ws.ws.url);
  const data = {
    app: ws_url.searchParams.get("app"),
    session: ws_url.searchParams.get("id"),
    transactions: transactions,
  };
  return parseRes(request(url, data));
}

async function 以sql向思源请求块数据(sql) {
  let sqldata = {
    stmt: sql,
  };
  let url = "/api/query/sql";
  return parseRes(request(url, sqldata));
}

async function 获取思源块链接锚文本(链接源文本) {
  链接源文本 = 链接源文本.replace("((", "").replace("))", "");
  let sql = `select * from blocks where id = '${链接源文本}'`;
  let 临时块属性 = await 以sql向思源请求块数据(sql);
  //  console.log ("临时块属性",临时块属性)
  let anchor = "";
  if (临时块属性) {
    try {
      if (临时块属性[0][name]) {
        anchor = 临时块属性[0][name];
      } else if (临时块属性[0]["content"]) {
        anchor = 临时块属性[0]["content"];
      } else {
        anchor = 链接源文本;
      }
    } catch (e) {
      anchor = "解析错误";
    }
  }
  //   console.log("锚文本",anchor)
  return anchor;
}

// 打开思源笔记本
export async function openNotebook(笔记本id) {
  let data = {
    notebook: 笔记本id,
  };
  let url = "/api/notebook/openNotebook";
  return parseRes(request(url, data));
  //返回空数据
}

// 关闭思源笔记本
export async function closeNotebook(笔记本id) {
  let data = {
    notebook: 笔记本id,
  };
  let url = "/api/notebook/closeNotebook";
  return parseRes(request(url, data));
  //返回空数据
}

// 重命名思源笔记本
export async function renameNotebook(笔记本id, 笔记本的新名称) {
  let data = {
    notebook: 笔记本id,
    name: 笔记本的新名称,
  };
  let url = "/api/notebook/renameNotebook";
  return parseRes(request(url, data));
  //返回空数据
}

// 新建思源笔记本
export async function createNotebook(笔记本名称) {
  let data = {
    name: 笔记本名称,
  };
  let url = "/api/notebook/createNotebook";
  return parseRes(request(url, data));
  //返回空数据
}

// 删除思源笔记本
export async function removeNotebook(笔记本id) {
  let data = { notebook: 笔记本id };
  let url = "/api/notebook/removeNotebook";
  return parseRes(request(url, data));
  //返回空数据
}

// 获取思源笔记本配置
export async function getNotebookConf(笔记本id) {
  let data = { notebook: 笔记本id };
  let url = "/api/notebook/getNotebookConf";
  return parseRes(request(url, data));
  //返回笔记本配置
}

// 保存思源笔记本配置
export async function setNotebookConf(笔记本id) {
  let data = { notebook: 笔记本id };
  let url = "/api/notebook/setNotebookConf";
  return parseRes(request(url, data));
  //返回笔记本配置
}

async function 重命名思源文档(笔记本id, 文档路径, 文档新标题) {
  let data = {
    notebook: 笔记本id,
    path: 文档路径,
    title: 文档新标题,
  };
  let url = "/api/filetree/renameDoc";
  return parseRes(request(url, data));
  //返回空数据
}

async function 删除思源文档(笔记本id, 文档路径) {
  let data = {
    notebook: 笔记本id,
    path: 文档路径,
  };
  let url = "/api/filetree/removeDoc";
  return parseRes(request(url, data));
  //返回空数据
}

async function 移动思源文档(源笔记本ID, 源路径, 目标笔记本ID, 目标路径) {
  let data = {
    fromNotebook: 源笔记本ID,
    fromPath: 源路径,
    toNotebook: 目标笔记本ID,
    toPath: 目标路径,
  };
  let url = "/api/filetree/moveDoc";
  return parseRes(request(url, data));
  //返回空数据
}

// 根据思源路径获取人类可读路径
export async function getHPathByPath(笔记本ID, 路径) {
  let data = {
    Notebook: 笔记本ID,
    Path: 路径,
  };
  let url = "/api/filetree/getHPathByPath";
  return parseRes(request(url, data));
  //返回路径
}

// 根据块ID查询文档人类可读完整路径
export async function getHPathByID(ID) {
  let data = {
    id: ID,
  };
  let url = "/api/filetree/getHPathByID";
  return parseRes(request(url, data));
}

//暂缺上传文件

async function 以id获取思源块属性(内容块id) {
  let data = {
    id: 内容块id,
  };
  let url = "/api/attr/getBlockAttrs";
  return parseRes(request(url, data));
}

async function 以id获取思源块信息(内容块id) {
  let sql = `select * from blocks where id ='${内容块id}'`;
  let data = await 以sql向思源请求块数据(sql);
  return data[0];
}

async function 获取块kramdown源码(内容块id) {
  const data = {
    id: 内容块id,
  };
  const url = "/api/block/getBlockKramdown";
  return parseRes(request(url, data));
}

async function 获取块面包屑(ID) {
  const data = {
    id: ID,
  };
  const url = "/api/block/getBlockBreadcrumb";
  return parseRes(request(url, data));
}

async function 设置思源块属性(内容块id, 属性对象) {
  let url = "/api/attr/setBlockAttrs";
  return parseRes(
    request(url, {
      id: 内容块id,
      attrs: 属性对象,
    })
  );
}

async function 以id获取文档块markdown(文档id) {
  let data = {
    id: 文档id,
  };
  let url = "/api/export/exportMdContent";
  return parseRes(request(url, data));
  //文档hepath与Markdown 内容
}

async function 以id获取文档大纲(文档id) {
  let data = {
    id: 文档id,
  };
  let url = "/api/outline/getDocOutline";
  return parseRes(request(url, data));
}

async function 列出指定路径下文档(路径) {
  let data = {
    path: 路径,
  };
  let url = "/api/filetree/listDocsByPath";
  return parseRes(request(url, data));
  //文档hepath与Markdown 内容
}

function html转义(原始字符串) {
  var 临时元素 = document.createElement("div");
  临时元素.innerHTML = 原始字符串;
  var output = 临时元素.innerText || 临时元素.textContent;
  临时元素 = null;
  // console.log(output)
  return output;
}

async function 以id获取反向链接(id) {
  let data = {
    id: id,
    beforeLen: 10,
    k: "",
    mk: "",
  };
  let url = "/api/ref/getBacklink";
  return parseRes(request(url, data));
}

async function 以sql获取嵌入块内容(外部id数组, sql) {
  let data = {
    stmt: sql,
    excludeIDs: 外部id数组,
  };
  let url = "/api/search/searchEmbedBlock";
  return parseRes(request(url, data));
}
async function 以id获取文档内容(id) {
  let data = {
    id: id,
    k: "",
    mode: 2,
    size: 36,
  };
  let url = "/api/filetree/getDoc";
  return parseRes(request(url, data));
}
async function 获取标签列表() {
  let data = {};
  let url = "/api/tag/getTag";
  return parseRes(request(url, data));
}
async function 以id获取局部图谱(k, id, conf, reqId) {
  let data = {
    id: id,
    k: k,
    conf: conf,
    reqId: reqId,
  };
  let url = "/api/graph/getLocalGraph";
  return parseRes(request(url, data));
}
async function 获取全局图谱(k, conf, reqId) {
  let data = {
    k: k,
    conf: conf,
    reqId: reqId,
  };
  let url = "/api/graph/getGraph";
  return parseRes(request(url, data));
}

async function 以关键词搜索文档(k) {
  let data = {
    k: k,
  };
  let url = "/api/filetree/searchDocs";
  return parseRes(request(url, data));
}
async function 以关键词搜索块(query) {
  let data = {
    query: query,
  };
  let url = "/api/search/searchBlock";
  return parseRes(request(url, data));
}
async function 以关键词搜索模板(k) {
  let data = {
    k: k,
  };
  let url = "/api/search/searchTemplate";
  return parseRes(request(url, data));
}

async function 通过markdown创建文档(notebook, path, markdown) {
  let data = {
    notebook: notebook,
    path: path,
    markdown: markdown,
  };
  let url = "/api/filetree/createDocWithMd";
  return parseRes(request(url, data));
}

async function 导出模板(id, overwrite = false) {
  let url = "/api/template/docSaveAsTemplate";
  let data = {
    id: id,
    overwrite: overwrite,
  };
  return parseRes(request(url, data));
}

async function 渲染模板(data) {
  let url = "/api/template/render";
  return parseRes(request(url, data));
}

async function 插入块(previousID, dataType, data) {
  let url = "/api/block/insertBlock";
  return parseRes(
    request(
      (url = url),
      (data = {
        previousID: previousID,
        dataType: dataType,
        data: data,
      })
    )
  );
}

async function 插入前置子块(parentID, dataType, data) {
  let url = "/api/block/prependBlock";
  return parseRes(
    request(
      (url = url),
      (data = {
        parentID: parentID,
        dataType: dataType,
        data: data,
      })
    )
  );
}
async function 插入后置子块(parentID, dataType, data) {
  let url = "/api/block/appendBlock";
  return parseRes(
    request(
      (url = url),
      (data = {
        parentID: parentID,
        dataType: dataType,
        data: data,
      })
    )
  );
}

async function 更新块(id, dataType, data) {
  let url = "/api/block/updateBlock";
  return parseRes(
    request(
      (url = url),
      (data = {
        id: id,
        dataType: dataType,
        data: data,
      })
    )
  );
}

async function 删除块(id) {
  let url = "/api/block/deleteBlock";
  return parseRes(
    request(
      (url = url),
      (data = {
        id: id,
      })
    )
  );
}

export async function getSysFonts() {
  let url = "/api/system/getSysFonts";
  return parseRes(request(url));
}

export async function getFile(path) {
  const response = await fetch("/api/file/getFile", {
    method: "POST",
    headers: {
      Authorization: `Token ${config.apitoken}`,
    },
    body: JSON.stringify({
      path: path,
    }),
  });
  if (response.status === 200) return response;
  else return null;
}

export async function putFile(
  path,
  filedata,
  isDir = false,
  modTime = Date.now()
) {
  let blob = new Blob([filedata]);
  let file = new File([blob], path.split("/").pop());
  let formdata = new FormData();
  formdata.append("path", path);
  formdata.append("file", file);
  formdata.append("isDir", isDir);
  formdata.append("modTime", modTime);
  const response = await fetch("/api/file/putFile", {
    body: formdata,
    method: "POST",
    headers: {
      Authorization: `Token ${config.apitoken}`,
    },
  });
  if (response.status === 200) return await response.json();
  else return null;
}

const language = window.sofill.languageMode;

export async function pushMsg(message = null, text = null, timeout = 7000) {
  const url = "/api/notification/pushMsg";
  const data = {
    msg: message ? message[language] || message.other : text,
    timeout: timeout,
  };
  return parseRes(request(url, data));
}
export function 通知(text, timeout = 7000) {
  var url = `http://127.0.0.1:6806/api/notification/pushMsg`;
  var httpRequest = new XMLHttpRequest();
  httpRequest.open("POST", url, true);
  httpRequest.setRequestHeader("Content-type", "application/json");
  var obj = {
    msg: text,
    timeout: 7000,
  };
  httpRequest.send(JSON.stringify(obj));
  // 响应后的回调函数
  httpRequest.onreadystatechange = function () {
    if (httpRequest.readyState == 4 && httpRequest.status == 200) {
      var json = httpRequest.responseText;
      console.log(json);
    }
  };
}

export async function pushErrMsg(message = null, text = null, timeout = 7000) {
  const url = "/api/notification/pushErrMsg";
  const data = {
    msg: message ? message[language] || message.other : text,
    timeout: timeout,
  };
  return parseRes(request(url, data));
}

function pushMessage(text) {
  var url = `http://127.0.0.1:6806/api/notification/pushMsg`;
  var httpRequest = new XMLHttpRequest();
  httpRequest.open("POST", url, true);
  httpRequest.setRequestHeader("Content-type", "application/json");
  var obj = {
    msg: text,
    timeout: 7000,
  };
  httpRequest.send(JSON.stringify(obj));
  // 响应后的回调函数
  httpRequest.onreadystatechange = function () {
    if (httpRequest.readyState == 4 && httpRequest.status == 200) {
      var json = httpRequest.responseText;
      console.log(json);
    }
  };
}
/**
 * 获得文本的占用的宽度
 * @param {*} text 字符串文班
 * @param {*} font 文本字体的样式
 * @returns
 */
export function getTextWidth(text, font) {
  var canvas =
    getTextWidth.canvas ||
    (getTextWidth.canvas = document.createElement("canvas"));
  var context = canvas.getContext("2d");
  context.font = font;
  var metrics = context.measureText(text);
  return metrics.width;
}

/**
 * 向指定父级创建追加一个子元素，并可选添加ID,
 * @param {Element} fatherElement
 * @param {string} addElementTxt 要创建添加的元素标签
 * @param {string} setId
 * @returns addElementObject
 */
export function addinsertCreateElement(fatherElement, addElementTxt, setId = null) {
  var element = document.createElement(addElementTxt);
  if (setId) element.id = setId;
  fatherElement.appendChild(element);
  return element;
}

/**
 * 向指定元素后创建插入一个元素，可选添加ID
 * @param {*} targetElement 目标元素
 * @param {*} addElementTxt 要创建添加的元素标签
 * @param {*} setId 为创建元素设置ID
 */
export function insertCreateAfter(targetElement, addElementTxt, setId = null) {
  var element = document.createElement(addElementTxt);
  if (setId) element.id = setId;
  var parent = targetElement.parentNode; //得到父节点
  if (parent.lastChild === targetElement) {
    parent.appendChild(element);
    return element;
  } else {
    parent.insertBefore(element, targetElement.nextSibling); //否则，当前节点的下一个节点之前添加
    return element;
  }
}

/**
 * 为元素注册监听事件
 * @param {Element} element
 * @param {string} strType
 * @param {Fun} fun
 */
function AddEvent(element, strType, fun) {
  //判断浏览器有没有addEventListener方法
  if (element.addEventListener) {
    element.addEventListener(strType, fun, false);
    //判断浏览器有没 有attachEvent IE8的方法
  } else if (element.attachEvent) {
    element.attachEvent("on" + strType, fun);
    //如果都没有则使用 元素.事件属性这个基本方法
  } else {
    element["on" + strType] = fun;
  }
}

/**
 * 为元素解绑监听事件
 * @param {Element}  element ---注册事件元素对象
 * @param {String}   strType ---注册事件名(不加on 如"click")
 * @param {Function} fun	 ---回调函数
 *
 */
function myRemoveEvent(element, strType, fun) {
  //判断浏览器有没有addEventListener方法
  if (element.addEventListener) {
    // addEventListener方法专用删除方法
    element.removeEventListener(strType, fun, false);
    //判断浏览器有没有attachEvent IE8的方法
  } else if (element.attachEvent) {
    // attachEvent方法专用删除事件方法
    element.detachEvent("on" + strType, fun);
    //如果都没有则使用 元素.事件属性这个基本方法
  } else {
    //删除事件用null
    element["on" + strType] = null;
  }
}

/**
 * 递归DOM元素查找深度子级的第一个符合条件的元素
 * @param {*} element 要查找DOM元素
 * @param {*} judgeFun 查找函数 : fun(v) return true or false
 * @returns element
 */
function diguiTooONE(element, judgeFun) {
  if (element == null) return null;
  if (judgeFun == null) return null;

  return digui(element);

  function digui(elem) {
    var child = elem.children;
    if ((child.length = 0)) return null;

    for (let index = 0; index < child.length; index++) {
      const element2 = child[index];
      if (judgeFun(element2)) {
        return element2;
      } else {
        var item = digui(element2);
        if (item == null) continue;
        return item;
      }
    }
    return null;
  }
}

//+++++++++++++++++++++++++++++++++++++++++++++++思源API

/**
 * 获得所选择的块对应的块 ID
 * @returns {string} 块 ID
 * @returns {
 *     id: string, // 块 ID
 *     type: string, // 块类型
 *     subtype: string, // 块子类型(若没有则为 null)
 * }
 * @returns {null} 没有找到块 ID */
export function getBlockSelected() {
  let node_list = document.querySelectorAll(
    ".protyle:not(.fn__none)>.protyle-content .protyle-wysiwyg--select"
  );
  if (node_list.length === 1 && node_list[0].dataset.nodeId != null)
    return {
      id: node_list[0].dataset.nodeId,
      type: node_list[0].dataset.type,
      subtype: node_list[0].dataset.subtype,
      parentNode: node_list[0].offsetParent,
    };
  return null;
}

export function removejscssfile(filename, filetype) {
  var targetelement =
    filetype == "js" ? "script" : filetype == "css" ? "link" : "none";
  var targetattr =
    filetype == "js" ? "src" : filetype == "css" ? "href" : "none";
  var allsuspects = document.getElementsByTagName(targetelement);
  for (var i = allsuspects.length; i >= 0; i--) {
    if (
      allsuspects[i] &&
      allsuspects[i].getAttribute(targetattr) != null &&
      allsuspects[i].getAttribute(targetattr).indexOf(filename) != -1
    )
      allsuspects[i].parentNode.removeChild(allsuspects[i]);
  }
}
/**
 * 向指定元素前创建插入一个元素，可选添加ID
 * @param {*} targetElement 目标元素
 * @param {*} addElementTxt 要创建添加的元素标签
 * @param {*} setId 为创建元素设置ID
 */
export function insertCreateBefore(targetElement, addElementTxt, setId = null) {
  if (!targetElement) console.error("指定元素对象不存在！");
  if (!addElementTxt) console.error("未指定字符串！");
  var element = document.createElement(addElementTxt);
  if (setId) element.id = setId;
  targetElement.parentElement.insertBefore(element, targetElement);
  return element;
}

// 如果 version1 > version2 返回 1，如果 version1 < version2 返回 -1， 除此之外返回 0。
export function compareVersion(version1, version2) {
  const arr1 = version1.split(".");
  const arr2 = version2.split(".");
  const length1 = arr1.length;
  const length2 = arr2.length;
  const minlength = Math.min(length1, length2);
  let i = 0;
  for (i; i < minlength; i++) {
    let a = parseInt(arr1[i]);
    let b = parseInt(arr2[i]);
    if (a > b) {
      return 1;
    } else if (a < b) {
      return -1;
    }
  }
  if (length1 > length2) {
    for (let j = i; j < length1; j++) {
      if (parseInt(arr1[j]) != 0) {
        return 1;
      }
    }
    return 0;
  } else if (length1 < length2) {
    for (let j = i; j < length2; j++) {
      if (parseInt(arr2[j]) != 0) {
        return -1;
      }
    }
    return 0;
  }
  return 0;
}

//判断字符是否为空
export function isEmpty(obj) {
  return (
    typeof obj === "undefined" || obj === null || obj === "" || obj === "null"
  );
}

export function RangeLimitedInt(min, value1, max) {
  var v1 = parseInt(min, 10);
  var v2 = parseInt(value1, 10);
  var v3 = parseInt(max, 10);
  var vmin = v2 < v3 ? v2 : v3;
  var vmax = v1 > vmin ? v1 : vmin;
  return vmax;
}

export function CopyDOM(from, to) {
  var upperDiv = document.querySelector(from);
  var belowNode = document.querySelector(to);
  var newDom = upperDiv.cloneNode(true);
  belowNode.appendChild(newDom);
}
export function MoveDOM(from, to) {
  var upperDiv = document.querySelector(from);
  var belowNode = document.querySelector(to);
  belowNode.appendChild(upperDiv);
}
export function MoveChildren(from, to) {
  var upperDiv = document.querySelector(from);
  var upperUl = upperDiv.children;
  var len = upperDiv.childElementCount;
  var belowNode = document.querySelector(to);
  for (var i = 0; i < len; i++) {
    belowNode.appendChild(upperUl[0]);
  }
}

export function isDesktopAppMode() {
  let cl = window.document.body.classList;
  return cl.contains("android")
    ? false
    : cl.contains("client--browser")
    ? false
    : window.siyuan.config.system.os == "windows" ||
      window.siyuan.config.system.os == "darwin"
    ? true
    : false;
}

export function isPhoneAppMode() {
  let x = document.body.classList.contains("body--mobile");
  let y = document.body.classList.contains("client--siyuan");
  if (x && y) {
    return true;
  } else {
    return false;
  }
}

var obj = {};

async function bindDomWithObject(options) {
  var dom = document.getElementById(options.id); // 获取dom id
  var obj = options.obj; // 需要绑定的obj
  var prop = options.prop; // 需要绑定的obj 的属性
  var callback = options.callback; // 绑定成功后调用
  var type = options.type; // 绑定的事件类型
  var updated = options.updated; // 更新成功后调用

  Object.defineProperty(obj, prop, {
    get: function () {
      return dom.value;
    },
    set: function (value) {
      dom.value = value;
      localStorage.setItem(prop, value);
    },
    configurable: true,
  });

  dom.addEventListener(type, function () {
    obj[prop] = obj[prop];
    if (typeof updated === "function") {
      updated(obj, prop, dom); // 传入对象， 修改的属性， 以及dom节点
    }
  });

  if (typeof callback === "function") {
    callback(options, obj, dom);
  }
}

export async function propInit(id, type) {
  bindDomWithObject({
    id: id,
    obj: obj,
    prop: id,
    type: type,
    callback: function (options, obj, dom) {
      if (!isEmpty(localStorage.getItem(id))) {
        obj[options.prop] = localStorage.getItem(id);
      }
    },
  });
  console.log(`${id} binded successfully`);
}

export async function propChange(id, changeFn) {
  bindDomWithObject({
    id: id,
    obj: obj,
    prop: id,
    type: "change",
    updated: changeFn,
  });
  changeFn();
}

export async function checkedInit(obj) {
  if (localStorage.getItem(obj.id) === "true") {
    obj.checked = true;
  } else {
    obj.checked = false;
  }
  console.log(`${obj.id} binded successfully`);
}

export async function checkedChange(obj, YesFn, NoFn) {
  if (obj.checked && obj.checked === true) {
    localStorage.setItem(obj.id, "true");
    YesFn();
  } else {
    localStorage.setItem(obj.id, "false");
    NoFn();
  }
  obj.addEventListener("click", function () {
    if (obj.checked === true) {
      localStorage.setItem(obj.id, "true");
      YesFn();
    } else {
      localStorage.setItem(obj.id, "false");
      NoFn();
    }
  });
}

/**
 * 计算当前节点应使用的提示信息的朝向
 * @params {HTMLElement} element: 当前节点
 * @return {string}: 提示标签方向类
 */
export function getTooltipDirection(element) {
  const rect = element.getBoundingClientRect();
  const left = rect.left + rect.width / 2;
  const top = rect.top + rect.height / 2;

  const threshold_w = (1 * document.documentElement.offsetWidth) / 3;
  const threshold_e = (2 * document.documentElement.offsetWidth) / 3;
  const threshold_n = (1 * document.documentElement.offsetHeight) / 3;
  const threshold_s = (2 * document.documentElement.offsetHeight) / 3;
  let tooltips_class;
  switch (true) {
    case top < threshold_n && left < threshold_w:
      tooltips_class = "b3-tooltips__se";
      break;
    case top < threshold_n && left >= threshold_w && left <= threshold_e:
      tooltips_class = "b3-tooltips__s";
      break;
    case top < threshold_n && left > threshold_e:
      tooltips_class = "b3-tooltips__sw";
      break;
    case top >= threshold_n && top <= threshold_s && left < threshold_w:
      tooltips_class = "b3-tooltips__e";
      break;
    case top >= threshold_n &&
      top <= threshold_s &&
      left >= threshold_w &&
      left <= threshold_e:
      tooltips_class = "b3-tooltips__s";
      break;
    case top >= threshold_n && top <= threshold_s && left > threshold_e:
      tooltips_class = "b3-tooltips__w";
      break;
    case top > threshold_s && left < threshold_w:
      tooltips_class = "b3-tooltips__ne";
      break;
    case top > threshold_s && left >= threshold_w && left <= threshold_e:
      tooltips_class = "b3-tooltips__n";
      break;
    case top > threshold_s && left > threshold_e:
      tooltips_class = "b3-tooltips__nw";
      break;
    default:
      break;
  }
  return tooltips_class;
}

/**
 * 设置提示信息朝向方向
 * @params {function} classname: 获得元素的标签类名
 * @params {array} items: DOM 元素数组
 */
export function setTooltipDirection(classname, ...items) {
  const tooltips_class_list = [
    "b3-tooltips__nw",
    "b3-tooltips__n",
    "b3-tooltips__ne",
    "b3-tooltips__e",
    "b3-tooltips__se",
    "b3-tooltips__s",
    "b3-tooltips__sw",
    "b3-tooltips__w",
  ];
  items.forEach((item) => {
    item.classList.remove(...tooltips_class_list);
    item.classList.add(classname(item));
  });
}

/**
 * 获得焦点所在的块
 * @return {HTMLElement} 光标所在块
 * @return {null} 光标不在块内
 */
export function getFocusedBlock() {
  if (document.activeElement.classList.contains("protyle-wysiwyg")) {
    /* 光标在编辑区内 */
    let block = window.getSelection()?.focusNode?.parentElement; // 当前光标
    while (block != null && block?.dataset?.nodeId == null)
      block = block.parentElement;
    return block;
  } else return null;
}

/**
 * 获得焦点所在块 ID
 * @return {string} 块 ID
 * @return {null} 光标不在块内
 */
export function getFocusedBlockID() {
  let block = getFocusedBlock();
  if (block) {
    return block.dataset.nodeId;
  } else return null;
}

/**
 * 获得焦点所在文档
 * @return {HTMLElement} 焦点所在文档
 * @return {null} 没有聚焦的文档
 */
export function getFocusedDoc() {
  /* 点击按钮后焦点就发生了变化, 不能通过 document.activeElement 获取文档 */
  // const wysiwyg = document.activeElement;
  // return wysiwyg.classList.contains('protyle-wysiwyg')
  //     ? wysiwyg
  //     : null;

  return (
    document.querySelector(
      "div.layout__wnd--active div.protyle:not(.fn__none) > div.protyle-content > div.protyle-wysiwyg[data-doc-type]"
    ) ||
    document.querySelector(
      "#editor > div.protyle-content >  div.protyle-wysiwyg[data-doc-type]"
    ) ||
    null
  );
}

/**
 * 获得焦点所在文档的背景
 * @return {HTMLElement} 焦点所在文档的背景
 * @return {null} 没有聚焦的文档
 */
export function getFocusedDocBackground() {
  // return document.querySelector('div.layout__wnd--active div.protyle:not(.fn__none) > div.protyle-content > div.protyle-background')
  //     || document.querySelector('#editor > div.protyle-content > div.protyle-background')
  //     || null;

  const wysiwyg = getFocusedDoc();
  // console.log(wysiwyg);

  var background = wysiwyg;
  while (
    background != null &&
    background.classList.contains("protyle-background") === false
  )
    background = background.previousElementSibling;
  return background ? background : null;
}

/**
 * 获得焦点所在文档的 ID
 * @return {string} 文档 ID
 * @return {null} 没有聚焦的文档
 */
export function getFocusedDocID() {
  let background = getFocusedDocBackground();
  // console.log(background);
  if (background) {
    return background.dataset.nodeId;
  } else return null;
}

/**
 * 获得焦点所在的块 ID, 否则获得焦点所在文档的 ID
 * @return {string} 块 ID 或文档 ID
 * @return {null} 光标不在块内或文档内
 */
export function getFocusedID() {
  return getFocusedBlockID() || getFocusedDocID() || null;
}

export function OK() {
  return true;
}

export const LocalStorage = {
  getItem: function (key) {
    return localStorage.getItem(key);
  },
  setItem: function (id, val) {
    let data = {
      key: id,
      value: val
    };
    let url = "/api/storage/setLocalStorageVal";
    return parseRes(request(url, data));
  },
  removeItem: function (id) {
    let data = {
      key: id
    };
    let url = "/api/storage/removeLocalStorageVal";
    return parseRes(request(url, data));
  },
}

export const SofillDate = {
  isDuringDate: function (beginDateStr, endDateStr) {
    var curDate = new Date(),
      beginDate = new Date(beginDateStr),
      endDate = new Date(endDateStr);
    if (curDate >= beginDate && curDate <= endDate) {
      return true;
    }
    return false;
  },
  isDuringTime: function (beginTimeStr, endTimeStr) {
    var curDate = new Date();
    var beginDate = new Date(
      `${curDate.getFullYear()}-${
        curDate.getMonth() + 1
      }-${curDate.getDate()} ${beginTimeStr}`
    );
    var endDate = new Date(
      `${curDate.getFullYear()}-${
        curDate.getMonth() + 1
      }-${curDate.getDate()} ${endTimeStr}`
    );
    if (beginDate <= endDate) {
      if (beginDate <= curDate && curDate <= endDate) {
        return true;
      }
    } else if (beginDate <= curDate || curDate <= endDate) {
      return true;
    }
    return false;
  },
};

export function getUrlParam(urlStr, urlKey) {
  const url = new URL(urlStr); // 字符串转换成url格式
  const paramsStr = url.search.slice(1); // 获取'?'后面的参数字符串
  const paramsArr = paramsStr.split("&"); // 分割'&'字符 获得参数数组
  for (let i = 0; i < paramsArr.length; i++) {
    const tempArr = paramsArr[i].split("=");
    if (tempArr[0] === urlKey) {
      return tempArr[1];
    }
  }
}

export function getUrlParams(urlStr) {
  const url = new URL(urlStr); // 字符串转换成url格式
  const paramsStr = url.search.slice(1); // 获取'?'后面的参数字符串
  const paramsArr = paramsStr.split("&"); // 分割'&'字符 获得参数数组
  return paramsArr;
}

export async function getBazaarTheme(ip, apitoken, data) {
  let url = "http://" + ip + "/api/bazaar/getBazaarTheme";
  return request(url, apitoken, data);
}
export async function getInstalledTheme(ip, apitoken, data) {
  let url = "http://" + ip + "/api/bazaar/getInstalledTheme";
  return request(url, apitoken, data);
}



// siyuan/kernel/api/router.go /
/* func ServeAPI(ginServer *gin.Engine) {
	// 不需要鉴权

	ginServer.Handle("GET", "/api/system/bootProgress", bootProgress)
	ginServer.Handle("POST", "/api/system/bootProgress", bootProgress)
	ginServer.Handle("GET", "/api/system/version", version)
	ginServer.Handle("POST", "/api/system/version", version)
	ginServer.Handle("POST", "/api/system/currentTime", currentTime)
	ginServer.Handle("POST", "/api/system/uiproc", addUIProcess)
	ginServer.Handle("POST", "/api/system/loginAuth", model.LoginAuth)
	ginServer.Handle("POST", "/api/system/logoutAuth", model.LogoutAuth)
	ginServer.Handle("GET", "/api/system/getCaptcha", model.GetCaptcha)

	// 需要鉴权

	ginServer.Handle("POST", "/api/system/getEmojiConf", model.CheckAuth, getEmojiConf)
	ginServer.Handle("POST", "/api/system/setAccessAuthCode", model.CheckAuth, setAccessAuthCode)
	ginServer.Handle("POST", "/api/system/setNetworkServe", model.CheckAuth, setNetworkServe)
	ginServer.Handle("POST", "/api/system/setUploadErrLog", model.CheckAuth, setUploadErrLog)
	ginServer.Handle("POST", "/api/system/setAutoLaunch", model.CheckAuth, setAutoLaunch)
	ginServer.Handle("POST", "/api/system/setGoogleAnalytics", model.CheckAuth, setGoogleAnalytics)
	ginServer.Handle("POST", "/api/system/setDownloadInstallPkg", model.CheckAuth, setDownloadInstallPkg)
	ginServer.Handle("POST", "/api/system/setNetworkProxy", model.CheckAuth, setNetworkProxy)
	ginServer.Handle("POST", "/api/system/setWorkspaceDir", model.CheckAuth, setWorkspaceDir)
	ginServer.Handle("POST", "/api/system/getWorkspaces", model.CheckAuth, getWorkspaces)
	ginServer.Handle("POST", "/api/system/createWorkspaceDir", model.CheckAuth, createWorkspaceDir)
	ginServer.Handle("POST", "/api/system/removeWorkspaceDir", model.CheckAuth, removeWorkspaceDir)
	ginServer.Handle("POST", "/api/system/setAppearanceMode", model.CheckAuth, setAppearanceMode)
	ginServer.Handle("POST", "/api/system/getSysFonts", model.CheckAuth, getSysFonts)
	ginServer.Handle("POST", "/api/system/exit", model.CheckAuth, exit)
  // 客户端可以直接使用 window.location.href = "siyuan://api/system/exit";
	ginServer.Handle("POST", "/api/system/setUILayout", model.CheckAuth, setUILayout)
	ginServer.Handle("POST", "/api/system/getConf", model.CheckAuth, getConf)
	ginServer.Handle("POST", "/api/system/checkUpdate", model.CheckAuth, checkUpdate)
	ginServer.Handle("POST", "/api/system/exportLog", model.CheckAuth, exportLog)

	ginServer.Handle("POST", "/api/storage/setLocalStorage", model.CheckAuth, setLocalStorage)
	ginServer.Handle("POST", "/api/storage/getLocalStorage", model.CheckAuth, getLocalStorage)
	ginServer.Handle("POST", "/api/storage/setLocalStorageVal", model.CheckAuth, setLocalStorageVal)
	ginServer.Handle("POST", "/api/storage/removeLocalStorageVal", model.CheckAuth, removeLocalStorageVal)
	ginServer.Handle("POST", "/api/storage/setCriterion", model.CheckAuth, setCriterion)
	ginServer.Handle("POST", "/api/storage/getCriteria", model.CheckAuth, getCriteria)
	ginServer.Handle("POST", "/api/storage/removeCriterion", model.CheckAuth, removeCriterion)
	ginServer.Handle("POST", "/api/storage/setRecentDoc", model.CheckAuth, setRecentDoc)
	ginServer.Handle("POST", "/api/storage/getRecentDocs", model.CheckAuth, getRecentDocs)

	ginServer.Handle("POST", "/api/account/login", model.CheckAuth, login)
	ginServer.Handle("POST", "/api/account/checkActivationcode", model.CheckAuth, checkActivationcode)
	ginServer.Handle("POST", "/api/account/useActivationcode", model.CheckAuth, useActivationcode)
	ginServer.Handle("POST", "/api/account/deactivate", model.CheckAuth, deactivateUser)
	ginServer.Handle("POST", "/api/account/startFreeTrial", model.CheckAuth, startFreeTrial)

	ginServer.Handle("POST", "/api/notebook/lsNotebooks", model.CheckAuth, lsNotebooks)
	ginServer.Handle("POST", "/api/notebook/openNotebook", model.CheckAuth, openNotebook)
	ginServer.Handle("POST", "/api/notebook/closeNotebook", model.CheckAuth, closeNotebook)
	ginServer.Handle("POST", "/api/notebook/getNotebookConf", model.CheckAuth, getNotebookConf)
	ginServer.Handle("POST", "/api/notebook/setNotebookConf", model.CheckAuth, setNotebookConf)
	ginServer.Handle("POST", "/api/notebook/createNotebook", model.CheckAuth, createNotebook)
	ginServer.Handle("POST", "/api/notebook/removeNotebook", model.CheckAuth, removeNotebook)
	ginServer.Handle("POST", "/api/notebook/renameNotebook", model.CheckAuth, renameNotebook)
	ginServer.Handle("POST", "/api/notebook/changeSortNotebook", model.CheckAuth, changeSortNotebook)
	ginServer.Handle("POST", "/api/notebook/setNotebookIcon", model.CheckAuth, setNotebookIcon)

	ginServer.Handle("POST", "/api/filetree/searchDocs", model.CheckAuth, searchDocs)
	ginServer.Handle("POST", "/api/filetree/listDocsByPath", model.CheckAuth, listDocsByPath)
	ginServer.Handle("POST", "/api/filetree/getDoc", model.CheckAuth, getDoc)
	ginServer.Handle("POST", "/api/filetree/getDocNameTemplate", model.CheckAuth, getDocNameTemplate)
	ginServer.Handle("POST", "/api/filetree/getRefCreateSavePath", model.CheckAuth, getRefCreateSavePath)
	ginServer.Handle("POST", "/api/filetree/changeSort", model.CheckAuth, changeSort)
	ginServer.Handle("POST", "/api/filetree/lockFile", model.CheckAuth, lockFile)
	ginServer.Handle("POST", "/api/filetree/createDocWithMd", model.CheckAuth, model.CheckReadonly, createDocWithMd)
	ginServer.Handle("POST", "/api/filetree/createDailyNote", model.CheckAuth, model.CheckReadonly, createDailyNote)
	ginServer.Handle("POST", "/api/filetree/createDoc", model.CheckAuth, model.CheckReadonly, createDoc)
	ginServer.Handle("POST", "/api/filetree/renameDoc", model.CheckAuth, model.CheckReadonly, renameDoc)
	ginServer.Handle("POST", "/api/filetree/removeDoc", model.CheckAuth, model.CheckReadonly, removeDoc)
	ginServer.Handle("POST", "/api/filetree/removeDocs", model.CheckAuth, model.CheckReadonly, removeDocs)
	ginServer.Handle("POST", "/api/filetree/moveDocs", model.CheckAuth, model.CheckReadonly, moveDocs)
	ginServer.Handle("POST", "/api/filetree/duplicateDoc", model.CheckAuth, model.CheckReadonly, duplicateDoc)
	ginServer.Handle("POST", "/api/filetree/getHPathByPath", model.CheckAuth, getHPathByPath)
	ginServer.Handle("POST", "/api/filetree/getHPathsByPaths", model.CheckAuth, getHPathsByPaths)
	ginServer.Handle("POST", "/api/filetree/getHPathByID", model.CheckAuth, getHPathByID)
	ginServer.Handle("POST", "/api/filetree/getFullHPathByID", model.CheckAuth, getFullHPathByID)
	ginServer.Handle("POST", "/api/filetree/doc2Heading", model.CheckAuth, model.CheckReadonly, doc2Heading)
	ginServer.Handle("POST", "/api/filetree/heading2Doc", model.CheckAuth, model.CheckReadonly, heading2Doc)
	ginServer.Handle("POST", "/api/filetree/li2Doc", model.CheckAuth, model.CheckReadonly, li2Doc)
	ginServer.Handle("POST", "/api/filetree/refreshFiletree", model.CheckAuth, model.CheckReadonly, refreshFiletree)

	ginServer.Handle("POST", "/api/format/autoSpace", model.CheckAuth, model.CheckReadonly, autoSpace)
	ginServer.Handle("POST", "/api/format/netImg2LocalAssets", model.CheckAuth, model.CheckReadonly, netImg2LocalAssets)

	ginServer.Handle("POST", "/api/history/getNotebookHistory", model.CheckAuth, getNotebookHistory)
	ginServer.Handle("POST", "/api/history/rollbackNotebookHistory", model.CheckAuth, rollbackNotebookHistory)
	ginServer.Handle("POST", "/api/history/rollbackAssetsHistory", model.CheckAuth, rollbackAssetsHistory)
	ginServer.Handle("POST", "/api/history/getDocHistoryContent", model.CheckAuth, getDocHistoryContent)
	ginServer.Handle("POST", "/api/history/rollbackDocHistory", model.CheckAuth, model.CheckReadonly, rollbackDocHistory)
	ginServer.Handle("POST", "/api/history/clearWorkspaceHistory", model.CheckAuth, model.CheckReadonly, clearWorkspaceHistory)
	ginServer.Handle("POST", "/api/history/reindexHistory", model.CheckAuth, model.CheckReadonly, reindexHistory)
	ginServer.Handle("POST", "/api/history/searchHistory", model.CheckAuth, model.CheckReadonly, searchHistory)
	ginServer.Handle("POST", "/api/history/getHistoryItems", model.CheckAuth, model.CheckReadonly, getHistoryItems)

	ginServer.Handle("POST", "/api/outline/getDocOutline", model.CheckAuth, getDocOutline)
	ginServer.Handle("POST", "/api/bookmark/getBookmark", model.CheckAuth, getBookmark)
	ginServer.Handle("POST", "/api/bookmark/renameBookmark", model.CheckAuth, renameBookmark)
	ginServer.Handle("POST", "/api/bookmark/removeBookmark", model.CheckAuth, removeBookmark)
	ginServer.Handle("POST", "/api/tag/getTag", model.CheckAuth, getTag)
	ginServer.Handle("POST", "/api/tag/renameTag", model.CheckAuth, renameTag)
	ginServer.Handle("POST", "/api/tag/removeTag", model.CheckAuth, removeTag)

	ginServer.Handle("POST", "/api/lute/spinBlockDOM", model.CheckAuth, spinBlockDOM) // 未测试
	ginServer.Handle("POST", "/api/lute/html2BlockDOM", model.CheckAuth, html2BlockDOM)
	ginServer.Handle("POST", "/api/lute/copyStdMarkdown", model.CheckAuth, copyStdMarkdown)

	ginServer.Handle("POST", "/api/query/sql", model.CheckAuth, SQL)

	ginServer.Handle("POST", "/api/search/searchTag", model.CheckAuth, searchTag)
	ginServer.Handle("POST", "/api/search/searchTemplate", model.CheckAuth, searchTemplate)
	ginServer.Handle("POST", "/api/search/searchWidget", model.CheckAuth, searchWidget)
	ginServer.Handle("POST", "/api/search/searchRefBlock", model.CheckAuth, searchRefBlock)
	ginServer.Handle("POST", "/api/search/searchEmbedBlock", model.CheckAuth, searchEmbedBlock)
	ginServer.Handle("POST", "/api/search/fullTextSearchBlock", model.CheckAuth, fullTextSearchBlock)
	ginServer.Handle("POST", "/api/search/searchAsset", model.CheckAuth, searchAsset)
	ginServer.Handle("POST", "/api/search/findReplace", model.CheckAuth, findReplace)

	ginServer.Handle("POST", "/api/block/getBlockInfo", model.CheckAuth, getBlockInfo)
	ginServer.Handle("POST", "/api/block/getBlockDOM", model.CheckAuth, getBlockDOM)
	ginServer.Handle("POST", "/api/block/getBlockKramdown", model.CheckAuth, getBlockKramdown)
	ginServer.Handle("POST", "/api/block/getBlockBreadcrumb", model.CheckAuth, getBlockBreadcrumb)
	ginServer.Handle("POST", "/api/block/getBlockIndex", model.CheckAuth, getBlockIndex)
	ginServer.Handle("POST", "/api/block/getRefIDs", model.CheckAuth, getRefIDs)
	ginServer.Handle("POST", "/api/block/getRefIDsByFileAnnotationID", model.CheckAuth, getRefIDsByFileAnnotationID)
	ginServer.Handle("POST", "/api/block/getBlockDefIDsByRefText", model.CheckAuth, getBlockDefIDsByRefText)
	ginServer.Handle("POST", "/api/block/getRefText", model.CheckAuth, getRefText)
	ginServer.Handle("POST", "/api/block/getTreeStat", model.CheckAuth, getTreeStat)
	ginServer.Handle("POST", "/api/block/getBlocksWordCount", model.CheckAuth, getBlocksWordCount)
	ginServer.Handle("POST", "/api/block/getContentWordCount", model.CheckAuth, getContentWordCount)
	ginServer.Handle("POST", "/api/block/getRecentUpdatedBlocks", model.CheckAuth, getRecentUpdatedBlocks)
	ginServer.Handle("POST", "/api/block/getDocInfo", model.CheckAuth, getDocInfo)
	ginServer.Handle("POST", "/api/block/checkBlockExist", model.CheckAuth, checkBlockExist)
	ginServer.Handle("POST", "/api/block/checkBlockFold", model.CheckAuth, checkBlockFold)
	ginServer.Handle("POST", "/api/block/insertBlock", model.CheckAuth, insertBlock)
	ginServer.Handle("POST", "/api/block/prependBlock", model.CheckAuth, prependBlock)
	ginServer.Handle("POST", "/api/block/appendBlock", model.CheckAuth, appendBlock)
	ginServer.Handle("POST", "/api/block/updateBlock", model.CheckAuth, updateBlock)
	ginServer.Handle("POST", "/api/block/deleteBlock", model.CheckAuth, deleteBlock)
	ginServer.Handle("POST", "/api/block/setBlockReminder", model.CheckAuth, setBlockReminder)
	ginServer.Handle("POST", "/api/block/getHeadingLevelTransaction", model.CheckAuth, getHeadingLevelTransaction)
	ginServer.Handle("POST", "/api/block/getHeadingDeleteTransaction", model.CheckAuth, getHeadingDeleteTransaction)
	ginServer.Handle("POST", "/api/block/getHeadingChildrenIDs", model.CheckAuth, getHeadingChildrenIDs)
	ginServer.Handle("POST", "/api/block/getHeadingChildrenDOM", model.CheckAuth, getHeadingChildrenDOM)
	ginServer.Handle("POST", "/api/block/swapBlockRef", model.CheckAuth, swapBlockRef)

	ginServer.Handle("POST", "/api/file/getFile", model.CheckAuth, getFile)
	ginServer.Handle("POST", "/api/file/putFile", model.CheckAuth, putFile)
	ginServer.Handle("POST", "/api/file/copyFile", model.CheckAuth, copyFile)

	ginServer.Handle("POST", "/api/ref/refreshBacklink", model.CheckAuth, refreshBacklink)
	ginServer.Handle("POST", "/api/ref/getBacklink", model.CheckAuth, getBacklink)
	ginServer.Handle("POST", "/api/ref/getBacklink2", model.CheckAuth, getBacklink2)
	ginServer.Handle("POST", "/api/ref/getBacklinkDoc", model.CheckAuth, getBacklinkDoc)
	ginServer.Handle("POST", "/api/ref/getBackmentionDoc", model.CheckAuth, getBackmentionDoc)

	ginServer.Handle("POST", "/api/attr/getBookmarkLabels", model.CheckAuth, getBookmarkLabels)
	ginServer.Handle("POST", "/api/attr/resetBlockAttrs", model.CheckAuth, model.CheckReadonly, resetBlockAttrs)
	ginServer.Handle("POST", "/api/attr/setBlockAttrs", model.CheckAuth, model.CheckReadonly, setBlockAttrs)
	ginServer.Handle("POST", "/api/attr/getBlockAttrs", model.CheckAuth, getBlockAttrs)

	ginServer.Handle("POST", "/api/cloud/getCloudSpace", model.CheckAuth, getCloudSpace)

	ginServer.Handle("POST", "/api/sync/setSyncEnable", model.CheckAuth, setSyncEnable)
	ginServer.Handle("POST", "/api/sync/setSyncGenerateConflictDoc", model.CheckAuth, setSyncGenerateConflictDoc)
	ginServer.Handle("POST", "/api/sync/setSyncMode", model.CheckAuth, setSyncMode)
	ginServer.Handle("POST", "/api/sync/setSyncProvider", model.CheckAuth, setSyncProvider)
	ginServer.Handle("POST", "/api/sync/setSyncProviderS3", model.CheckAuth, setSyncProviderS3)
	ginServer.Handle("POST", "/api/sync/setSyncProviderWebDAV", model.CheckAuth, setSyncProviderWebDAV)
	ginServer.Handle("POST", "/api/sync/setCloudSyncDir", model.CheckAuth, setCloudSyncDir)
	ginServer.Handle("POST", "/api/sync/createCloudSyncDir", model.CheckAuth, model.CheckReadonly, createCloudSyncDir)
	ginServer.Handle("POST", "/api/sync/removeCloudSyncDir", model.CheckAuth, model.CheckReadonly, removeCloudSyncDir)
	ginServer.Handle("POST", "/api/sync/listCloudSyncDir", model.CheckAuth, listCloudSyncDir)
	ginServer.Handle("POST", "/api/sync/performSync", model.CheckAuth, performSync)
	ginServer.Handle("POST", "/api/sync/performBootSync", model.CheckAuth, performBootSync)
	ginServer.Handle("POST", "/api/sync/getBootSync", model.CheckAuth, getBootSync)

	ginServer.Handle("POST", "/api/inbox/getShorthands", model.CheckAuth, getShorthands)
	ginServer.Handle("POST", "/api/inbox/getShorthand", model.CheckAuth, getShorthand)
	ginServer.Handle("POST", "/api/inbox/removeShorthands", model.CheckAuth, removeShorthands)

	ginServer.Handle("POST", "/api/extension/copy", model.CheckAuth, extensionCopy)

	ginServer.Handle("POST", "/api/clipboard/readFilePaths", model.CheckAuth, readFilePaths)

	ginServer.Handle("POST", "/api/asset/uploadCloud", model.CheckAuth, model.CheckReadonly, uploadCloud)
	ginServer.Handle("POST", "/api/asset/insertLocalAssets", model.CheckAuth, model.CheckReadonly, insertLocalAssets)
	ginServer.Handle("POST", "/api/asset/resolveAssetPath", model.CheckAuth, resolveAssetPath)
	ginServer.Handle("POST", "/api/asset/upload", model.CheckAuth, model.CheckReadonly, model.Upload)
	ginServer.Handle("POST", "/api/asset/setFileAnnotation", model.CheckAuth, model.CheckReadonly, setFileAnnotation)
	ginServer.Handle("POST", "/api/asset/getFileAnnotation", model.CheckAuth, getFileAnnotation)
	ginServer.Handle("POST", "/api/asset/getUnusedAssets", model.CheckAuth, getUnusedAssets)
	ginServer.Handle("POST", "/api/asset/removeUnusedAsset", model.CheckAuth, model.CheckReadonly, removeUnusedAsset)
	ginServer.Handle("POST", "/api/asset/removeUnusedAssets", model.CheckAuth, model.CheckReadonly, removeUnusedAssets)
	ginServer.Handle("POST", "/api/asset/getDocImageAssets", model.CheckAuth, model.CheckReadonly, getDocImageAssets)
	ginServer.Handle("POST", "/api/asset/renameAsset", model.CheckAuth, model.CheckReadonly, renameAsset)

	ginServer.Handle("POST", "/api/export/batchExportMd", model.CheckAuth, batchExportMd)
	ginServer.Handle("POST", "/api/export/exportMd", model.CheckAuth, exportMd)
	ginServer.Handle("POST", "/api/export/exportSY", model.CheckAuth, exportSY)
	ginServer.Handle("POST", "/api/export/exportNotebookSY", model.CheckAuth, exportNotebookSY)
	ginServer.Handle("POST", "/api/export/exportMdContent", model.CheckAuth, exportMdContent)
	ginServer.Handle("POST", "/api/export/exportHTML", model.CheckAuth, exportHTML)
	ginServer.Handle("POST", "/api/export/exportPreviewHTML", model.CheckAuth, exportPreviewHTML)
	ginServer.Handle("POST", "/api/export/exportMdHTML", model.CheckAuth, exportMdHTML)
	ginServer.Handle("POST", "/api/export/exportDocx", model.CheckAuth, exportDocx)
	ginServer.Handle("POST", "/api/export/addPDFOutline", model.CheckAuth, addPDFOutline)
	ginServer.Handle("POST", "/api/export/preview", model.CheckAuth, exportPreview)
	ginServer.Handle("POST", "/api/export/exportAsFile", model.CheckAuth, exportAsFile)
	ginServer.Handle("POST", "/api/export/exportData", model.CheckAuth, exportData)
	ginServer.Handle("POST", "/api/export/exportDataInFolder", model.CheckAuth, exportDataInFolder)
	ginServer.Handle("POST", "/api/export/exportTempContent", model.CheckAuth, exportTempContent)
	ginServer.Handle("POST", "/api/export/export2Liandi", model.CheckAuth, export2Liandi)

	ginServer.Handle("POST", "/api/import/importStdMd", model.CheckAuth, model.CheckReadonly, importStdMd)
	ginServer.Handle("POST", "/api/import/importData", model.CheckAuth, model.CheckReadonly, importData)
	ginServer.Handle("POST", "/api/import/importSY", model.CheckAuth, model.CheckReadonly, importSY)

	ginServer.Handle("POST", "/api/template/render", model.CheckAuth, renderTemplate)
	ginServer.Handle("POST", "/api/template/docSaveAsTemplate", model.CheckAuth, docSaveAsTemplate)

	ginServer.Handle("POST", "/api/transactions", model.CheckAuth, model.CheckReadonly, performTransactions)

	ginServer.Handle("POST", "/api/setting/setAccount", model.CheckAuth, setAccount)
	ginServer.Handle("POST", "/api/setting/setEditor", model.CheckAuth, setEditor)
	ginServer.Handle("POST", "/api/setting/setExport", model.CheckAuth, setExport)
	ginServer.Handle("POST", "/api/setting/setFiletree", model.CheckAuth, setFiletree)
	ginServer.Handle("POST", "/api/setting/setSearch", model.CheckAuth, setSearch)
	ginServer.Handle("POST", "/api/setting/setKeymap", model.CheckAuth, setKeymap)
	ginServer.Handle("POST", "/api/setting/setAppearance", model.CheckAuth, setAppearance)
	ginServer.Handle("POST", "/api/setting/getCloudUser", model.CheckAuth, getCloudUser)
	ginServer.Handle("POST", "/api/setting/logoutCloudUser", model.CheckAuth, logoutCloudUser)
	ginServer.Handle("POST", "/api/setting/login2faCloudUser", model.CheckAuth, login2faCloudUser)
	ginServer.Handle("POST", "/api/setting/getCustomCSS", model.CheckAuth, getCustomCSS)
	ginServer.Handle("POST", "/api/setting/setCustomCSS", model.CheckAuth, setCustomCSS)
	ginServer.Handle("POST", "/api/setting/setEmoji", model.CheckAuth, setEmoji)

	ginServer.Handle("POST", "/api/graph/resetGraph", model.CheckAuth, resetGraph)
	ginServer.Handle("POST", "/api/graph/resetLocalGraph", model.CheckAuth, resetLocalGraph)
	ginServer.Handle("POST", "/api/graph/getGraph", model.CheckAuth, getGraph)
	ginServer.Handle("POST", "/api/graph/getLocalGraph", model.CheckAuth, getLocalGraph)

	ginServer.Handle("POST", "/api/bazaar/getBazaarWidget", model.CheckAuth, getBazaarWidget)
	ginServer.Handle("POST", "/api/bazaar/getInstalledWidget", model.CheckAuth, getInstalledWidget)
	ginServer.Handle("POST", "/api/bazaar/installBazaarWidget", model.CheckAuth, installBazaarWidget)
	ginServer.Handle("POST", "/api/bazaar/uninstallBazaarWidget", model.CheckAuth, uninstallBazaarWidget)
	ginServer.Handle("POST", "/api/bazaar/getBazaarIcon", model.CheckAuth, getBazaarIcon)
	ginServer.Handle("POST", "/api/bazaar/getInstalledIcon", model.CheckAuth, getInstalledIcon)
	ginServer.Handle("POST", "/api/bazaar/installBazaarIcon", model.CheckAuth, installBazaarIcon)
	ginServer.Handle("POST", "/api/bazaar/uninstallBazaarIcon", model.CheckAuth, uninstallBazaarIcon)
	ginServer.Handle("POST", "/api/bazaar/getBazaarTemplate", model.CheckAuth, getBazaarTemplate)
	ginServer.Handle("POST", "/api/bazaar/getInstalledTemplate", model.CheckAuth, getInstalledTemplate)
	ginServer.Handle("POST", "/api/bazaar/installBazaarTemplate", model.CheckAuth, installBazaarTemplate)
	ginServer.Handle("POST", "/api/bazaar/uninstallBazaarTemplate", model.CheckAuth, uninstallBazaarTemplate)
	ginServer.Handle("POST", "/api/bazaar/getBazaarTheme", model.CheckAuth, getBazaarTheme)
	ginServer.Handle("POST", "/api/bazaar/getInstalledTheme", model.CheckAuth, getInstalledTheme)
	ginServer.Handle("POST", "/api/bazaar/installBazaarTheme", model.CheckAuth, installBazaarTheme)
	ginServer.Handle("POST", "/api/bazaar/uninstallBazaarTheme", model.CheckAuth, uninstallBazaarTheme)
	ginServer.Handle("POST", "/api/bazaar/getBazaarPackageREAME", model.CheckAuth, getBazaarPackageREAME)

	ginServer.Handle("POST", "/api/repo/initRepoKey", model.CheckAuth, initRepoKey)
	ginServer.Handle("POST", "/api/repo/initRepoKeyFromPassphrase", model.CheckAuth, initRepoKeyFromPassphrase)
	ginServer.Handle("POST", "/api/repo/resetRepo", model.CheckAuth, resetRepo)
	ginServer.Handle("POST", "/api/repo/importRepoKey", model.CheckAuth, importRepoKey)
	ginServer.Handle("POST", "/api/repo/createSnapshot", model.CheckAuth, createSnapshot)
	ginServer.Handle("POST", "/api/repo/tagSnapshot", model.CheckAuth, tagSnapshot)
	ginServer.Handle("POST", "/api/repo/checkoutRepo", model.CheckAuth, checkoutRepo)
	ginServer.Handle("POST", "/api/repo/getRepoSnapshots", model.CheckAuth, getRepoSnapshots)
	ginServer.Handle("POST", "/api/repo/getRepoTagSnapshots", model.CheckAuth, getRepoTagSnapshots)
	ginServer.Handle("POST", "/api/repo/removeRepoTagSnapshot", model.CheckAuth, removeRepoTagSnapshot)
	ginServer.Handle("POST", "/api/repo/getCloudRepoTagSnapshots", model.CheckAuth, getCloudRepoTagSnapshots)
	ginServer.Handle("POST", "/api/repo/removeCloudRepoTagSnapshot", model.CheckAuth, removeCloudRepoTagSnapshot)
	ginServer.Handle("POST", "/api/repo/uploadCloudSnapshot", model.CheckAuth, uploadCloudSnapshot)
	ginServer.Handle("POST", "/api/repo/downloadCloudSnapshot", model.CheckAuth, downloadCloudSnapshot)
	ginServer.Handle("POST", "/api/repo/diffRepoSnapshots", model.CheckAuth, diffRepoSnapshots)
	ginServer.Handle("POST", "/api/repo/openRepoSnapshotDoc", model.CheckAuth, openRepoSnapshotDoc)

	ginServer.Handle("POST", "/api/riff/createRiffDeck", model.CheckAuth, createRiffDeck)
	ginServer.Handle("POST", "/api/riff/renameRiffDeck", model.CheckAuth, renameRiffDeck)
	ginServer.Handle("POST", "/api/riff/removeRiffDeck", model.CheckAuth, removeRiffDeck)
	ginServer.Handle("POST", "/api/riff/getRiffDecks", model.CheckAuth, getRiffDecks)
	ginServer.Handle("POST", "/api/riff/addRiffCards", model.CheckAuth, addRiffCards)
	ginServer.Handle("POST", "/api/riff/removeRiffCards", model.CheckAuth, removeRiffCards)
	ginServer.Handle("POST", "/api/riff/getRiffDueCards", model.CheckAuth, getRiffDueCards)
	ginServer.Handle("POST", "/api/riff/reviewRiffCard", model.CheckAuth, reviewRiffCard)
	ginServer.Handle("POST", "/api/riff/getRiffCards", model.CheckAuth, getRiffCards)

	ginServer.Handle("POST", "/api/notification/pushMsg", model.CheckAuth, pushMsg)
	ginServer.Handle("POST", "/api/notification/pushErrMsg", model.CheckAuth, pushErrMsg)

	ginServer.Handle("POST", "/api/snippet/getSnippet", model.CheckAuth, getSnippet)
	ginServer.Handle("POST", "/api/snippet/setSnippet", model.CheckAuth, setSnippet)
	ginServer.Handle("POST", "/api/snippet/removeSnippet", model.CheckAuth, removeSnippet)
	ginServer.Handle("GET", "/snippets/*filepath", serveSnippets)
} */
