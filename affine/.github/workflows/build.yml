name: Build & Test

on:
  push:
    branches:
      - master
  pull_request:
    branches:
      - master

jobs:
  lint:
    name: Lint
    runs-on: ubuntu-latest
    environment: development

    steps:
      - uses: actions/checkout@v3
      - name: Setup Node.js
        uses: ./.github/actions/setup-node
      - run: yarn lint --max-warnings=0

  build-storybook:
    name: Build Storybook
    runs-on: ubuntu-latest
    environment: development

    steps:
      - uses: actions/checkout@v3
      - name: Setup Node.js
        uses: ./.github/actions/setup-node
      - run: yarn build:storybook
      - name: Upload storybook artifact
        uses: actions/upload-artifact@v3
        with:
          name: storybook
          path: ./packages/component/storybook-static
          if-no-files-found: error

  build-electron:
    name: Build @affine/electron
    runs-on: ubuntu-latest
    environment: development
    steps:
      - uses: actions/checkout@v3
      - name: Setup Node.js
        uses: ./.github/actions/setup-node
      - name: Build Electron
        working-directory: apps/electron
        run: yarn exec ts-node-esm ./scripts/build-ci.mts
      - name: Upload Ubuntu desktop artifact
        uses: actions/upload-artifact@v3
        with:
          name: affine-ubuntu
          path: ./apps/electron/dist

  build:
    name: Build @affine/web
    runs-on: ubuntu-latest
    environment: development

    steps:
      - uses: actions/checkout@v3
      - name: Setup Node.js
        uses: ./.github/actions/setup-node
      - name: Cache Next.js
        uses: actions/cache@v3
        with:
          path: |
            ${{ github.workspace }}/apps/web/.next/cache
          key: ${{ runner.os }}-nextjs-${{ hashFiles('**/yarn.lock') }}-${{ hashFiles('**.[jt]s', '**.[jt]sx') }}
          restore-keys: |
            ${{ runner.os }}-nextjs-${{ hashFiles('**/yarn.lock') }}-
      - name: Build
        run: yarn build
        env:
          NEXT_PUBLIC_FIREBASE_API_KEY: ${{ secrets.NEXT_PUBLIC_FIREBASE_API_KEY }}
          NEXT_PUBLIC_FIREBASE_AUTH_DOMAIN: ${{ secrets.NEXT_PUBLIC_FIREBASE_AUTH_DOMAIN }}
          NEXT_PUBLIC_FIREBASE_PROJECT_ID: ${{ secrets.NEXT_PUBLIC_FIREBASE_PROJECT_ID }}
          NEXT_PUBLIC_FIREBASE_STORAGE_BUCKET: ${{ secrets.NEXT_PUBLIC_FIREBASE_STORAGE_BUCKET }}
          NEXT_PUBLIC_FIREBASE_MESSAGING_SENDER_ID: ${{ secrets.NEXT_PUBLIC_FIREBASE_MESSAGING_SENDER_ID }}
          NEXT_PUBLIC_FIREBASE_APP_ID: ${{ secrets.NEXT_PUBLIC_FIREBASE_APP_ID }}
          NEXT_PUBLIC_FIREBASE_MEASUREMENT_ID: ${{ secrets.NEXT_PUBLIC_FIREBASE_MEASUREMENT_ID }}
          API_SERVER_PROFILE: local
          ENABLE_DEBUG_PAGE: true
          ENABLE_LEGACY_PROVIDER: true
          COVERAGE: true

      - name: Upload artifact
        uses: actions/upload-artifact@v3
        with:
          name: next-js
          path: ./apps/web/.next
          if-no-files-found: error

      - name: Build @affine/web for desktop
        run: yarn build
        env:
          NEXT_PUBLIC_FIREBASE_API_KEY: ${{ secrets.NEXT_PUBLIC_FIREBASE_API_KEY }}
          NEXT_PUBLIC_FIREBASE_AUTH_DOMAIN: ${{ secrets.NEXT_PUBLIC_FIREBASE_AUTH_DOMAIN }}
          NEXT_PUBLIC_FIREBASE_PROJECT_ID: ${{ secrets.NEXT_PUBLIC_FIREBASE_PROJECT_ID }}
          NEXT_PUBLIC_FIREBASE_STORAGE_BUCKET: ${{ secrets.NEXT_PUBLIC_FIREBASE_STORAGE_BUCKET }}
          NEXT_PUBLIC_FIREBASE_MESSAGING_SENDER_ID: ${{ secrets.NEXT_PUBLIC_FIREBASE_MESSAGING_SENDER_ID }}
          NEXT_PUBLIC_FIREBASE_APP_ID: ${{ secrets.NEXT_PUBLIC_FIREBASE_APP_ID }}
          NEXT_PUBLIC_FIREBASE_MEASUREMENT_ID: ${{ secrets.NEXT_PUBLIC_FIREBASE_MEASUREMENT_ID }}
          API_SERVER_PROFILE: affine
          ENABLE_DEBUG_PAGE: true
          ENABLE_LEGACY_PROVIDER: false
          COVERAGE: true

      - name: Export static resources
        run: yarn export
        working-directory: apps/web

      - name: Upload static resources artifact
        uses: actions/upload-artifact@v3
        with:
          name: next-js-static
          path: ./apps/web/out
          if-no-files-found: error

  server-test:
    name: Server Test
    runs-on: ubuntu-latest
    environment: development
    services:
      postgres:
        image: postgres
        env:
          POSTGRES_PASSWORD: affine
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
    steps:
      - uses: actions/checkout@v3
      - name: Setup Node.js
        uses: ./.github/actions/setup-node
      - name: Initialize database
        run: |
          psql -h localhost -U postgres -c "CREATE DATABASE affine;"
          psql -h localhost -U postgres -c "CREATE USER affine WITH PASSWORD 'affine';"
          psql -h localhost -U postgres -c "ALTER USER affine WITH SUPERUSER;"
        env:
          PGPASSWORD: affine
      - name: Generate prisma client
        run: |
          yarn exec prisma generate
          yarn exec prisma db push
        working-directory: apps/server
        env:
          DATABASE_URL: postgresql://affine:affine@localhost:5432/affine
      - name: Run init-db script
        run: yarn exec ts-node-esm ./scripts/init-db.ts
        working-directory: apps/server
        env:
          DATABASE_URL: postgresql://affine:affine@localhost:5432/affine
      - name: Run server tests
        run: yarn test:coverage
        working-directory: apps/server
        env:
          DATABASE_URL: postgresql://affine:affine@localhost:5432/affine
      - name: Upload server test coverage results
        uses: codecov/codecov-action@v3
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          files: ./apps/server/.coverage/lcov.info
          flags: server-test
          name: affine
          fail_ci_if_error: true

  storybook-test:
    name: Storybook Test
    runs-on: ubuntu-latest
    environment: development
    needs: [build-storybook]
    steps:
      - uses: actions/checkout@v3
      - name: Setup Node.js
        uses: ./.github/actions/setup-node
        with:
          playwright-install: true
      - name: Download storybook artifact
        uses: actions/download-artifact@v3
        with:
          name: storybook
          path: ./packages/component/storybook-static
      - name: Run storybook tests
        working-directory: ./packages/component
        run: |
          yarn exec concurrently -k -s first -n "SB,TEST" -c "magenta,blue" "yarn exec serve ./storybook-static -l 6006" "yarn exec wait-on tcp:6006 && yarn test-storybook --coverage"
      - name: Upload storybook test coverage results
        uses: codecov/codecov-action@v3
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          files: ./packages/component/coverage/storybook/coverage-storybook.json
          flags: storybook-test
          name: affine
          fail_ci_if_error: true

  e2e-test:
    name: E2E Test
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        shard: [1, 2, 3, 4]
    environment: development
    needs: [build, build-storybook]
    services:
      octobase:
        image: ghcr.io/toeverything/cloud-self-hosted:nightly-latest
        ports:
          - 3000:3000
        env:
          SIGN_KEY: 'test123'
          RUST_LOG: 'debug'
          JWST_DEV: '1'

    steps:
      - uses: actions/checkout@v3
      - name: Setup Node.js
        uses: ./.github/actions/setup-node
        with:
          playwright-install: true
      - name: Download artifact
        uses: actions/download-artifact@v3
        with:
          name: next-js
          path: ./apps/web/.next

      - name: Download storybook artifact
        uses: actions/download-artifact@v3
        with:
          name: storybook
          path: ./packages/component/storybook-static

      - name: Wait for Octobase Ready
        run: |
          node ./scripts/wait-3000-healthz.mjs

      - name: Run playwright tests
        run: yarn test --forbid-only --shard=${{ matrix.shard }}/${{ strategy.job-total }}
        env:
          COVERAGE: true

      - name: Collect code coverage report
        run: yarn exec nyc report -t .nyc_output --report-dir .coverage --reporter=lcov

      - name: Upload e2e test coverage results
        uses: codecov/codecov-action@v3
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          files: ./.coverage/lcov.info
          flags: e2etest
          name: affine
          fail_ci_if_error: true

      - name: Upload test results
        if: ${{ failure() }}
        uses: actions/upload-artifact@v2
        with:
          name: test-results-e2e-${{ matrix.shard }}
          path: ./test-results
          if-no-files-found: ignore

  dekstop-test:
    name: Desktop Test
    runs-on: ubuntu-latest
    environment: development
    needs: [build, build-electron]
    steps:
      - uses: actions/checkout@v3
      - name: Setup Node.js
        uses: ./.github/actions/setup-node
        with:
          playwright-install: true
      - name: Download Ubuntu desktop artifact
        uses: actions/download-artifact@v3
        with:
          name: affine-ubuntu
          path: ./apps/electron/dist

      - name: Download static resource artifact
        uses: actions/download-artifact@v3
        with:
          name: next-js-static
          path: ./apps/electron/resources/web-static

      - name: Run desktop tests
        run: xvfb-run --auto-servernum --server-args="-screen 0 1280x960x24" -- yarn test
        working-directory: apps/electron

      - name: Upload test results
        if: ${{ failure() }}
        uses: actions/upload-artifact@v2
        with:
          name: test-results-e2e-${{ matrix.shard }}
          path: ./test-results
          if-no-files-found: ignore

  unit-test:
    name: Unit Test
    runs-on: ubuntu-latest
    environment: development
    services:
      octobase:
        image: ghcr.io/toeverything/cloud-self-hosted:nightly-latest
        ports:
          - 3000:3000
        env:
          SIGN_KEY: 'test123'
          RUST_LOG: 'debug'
          JWST_DEV: '1'

    steps:
      - uses: actions/checkout@v3
      - name: Setup Node.js
        uses: ./.github/actions/setup-node

      - name: Unit Test
        run: yarn run test:unit:coverage

      - name: Upload unit test coverage results
        uses: codecov/codecov-action@v3
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          files: ./.coverage/store/lcov.info
          flags: unittest
          name: affine
          fail_ci_if_error: true
